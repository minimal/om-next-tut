;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name om.next.impl.refs, :imports nil, :requires nil, :uses nil, :defs {Ref {:num-fields 1, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}, :name om.next.impl.refs/Ref, :file "resources/public/js/om/next/impl/refs.cljc", :end-column 16, :type true, :column 13, :line 43, :record false, :end-line 43, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}}, ->Ref {:protocol-inline nil, :meta {:file "/Users/christophermcdevitt/code/scratch/om-next-tut/resources/public/js/om/next/impl/refs.cljc", :line 43, :column 13, :end-line 43, :end-column 16, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}, :factory :positional, :arglists (quote ([path]))}, :protocols #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}, :name om.next.impl.refs/->Ref, :variadic false, :file "resources/public/js/om/next/impl/refs.cljc", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :factory :positional, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ISeqable cljs.core/IStack cljs.core/IPrintWithWriter cljs.core/ILookup}}, ref {:protocol-inline nil, :meta {:file "/Users/christophermcdevitt/code/scratch/om-next-tut/resources/public/js/om/next/impl/refs.cljc", :line 76, :column 7, :end-line 76, :end-column 10, :arglists (quote ([root id & more])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(root id more)], :arglists ([root id & more]), :arglists-meta (nil)}}, :name om.next.impl.refs/ref, :variadic true, :file "resources/public/js/om/next/impl/refs.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(root id more)], :arglists ([root id & more]), :arglists-meta (nil)}, :method-params [(root id more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists ([root id & more])}, ref? {:protocol-inline nil, :meta {:file "/Users/christophermcdevitt/code/scratch/om-next-tut/resources/public/js/om/next/impl/refs.cljc", :line 79, :column 16, :end-line 79, :end-column 20, :tag boolean, :arglists (quote ([x]))}, :name om.next.impl.refs/ref?, :variadic false, :file "resources/public/js/om/next/impl/refs.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :ret-tag boolean, :end-line 79, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{path}, :order [path]}, :doc nil}